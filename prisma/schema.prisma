// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid())
  firstName    String
  lastName     String
  role         Role
  email        String
  password     String
  writtenPosts Post[]  @relation("WrittenPosts")
  Event        Event?  @relation(fields: [eventId], references: [id])
  eventId      String?
  Shop         Shop?   @relation(fields: [shopId], references: [id])
  shopId       String?
}

enum Role {
  SPECTATOR
  SHOPKEEPER
  EVENTORGANIZER
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId  String
}

model Shop {
  id                String  @id @default(uuid())
  shopName          String
  about             String
  address           String
  pic               String
  tag               Tag[]
  contact           Contact @relation("ShopContact")
  //uses explicit
  participateEvents Event[] @relation("ShopParticipation")
  appliedEvent      Event[] @relation("AppliedShops")

  // admin             User[]
  // ShopParticipation ShopParticipation[]
  // Event             Event?              @relation(fields: [eventId], references: [id])
  // eventId           String?
  // Event             Event?              @relation(fields: [eventId], references: [id])
  User              User[]
  ShopParticipation ShopParticipation[]
  Event             Event?              @relation(fields: [eventId], references: [id])
  eventId           String?
  Event             Event?              @relation(fields: [eventId], references: [id])
}

model ShopParticipation {
  id      String @id @default(uuid())
  shop    Shop   @relation(fields: [shopId], references: [id])
  event   Event  @relation(fields: [eventId], references: [id])
  shopId  String
  eventId String
}

model Contact {
  id        String  @id @default(uuid())
  shop      Shop    @relation("ShopContact", fields: [contactId], references: [id])
  contactId String  @unique
  tel       String
  facebook  String?
  instagram String?
  twitter   String?
}

model Event {
  id                String              @id @default(uuid())
  eventName         String
  about             String
  address           String
  pic               String
  tag               Tag[]
  contact           String[]
  containShops      Shop[]              @relation("ShopParticipation") //many to many relationship is not supported 
  admin             User[]
  appliedShops      Shop[]              @relation("AppliedShops") //
  //admin User -> one/many admin
  //add contact
  //apply -> contact
  Shop              Shop?               @relation(fields: [shopId], references: [id])
  shopId            String?
  ShopParticipation ShopParticipation[]
}

//include categories inside tags
model Tag {
  id      String  @id @default(uuid())
  tagName String
  Shop    Shop?   @relation(fields: [shopId], references: [id])
  shopId  String?
  Event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?
}
